#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2021 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################


from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.0',
    'status': ['preview'],
    'supported_by': 'opengear'
}

DOCUMENTATION = """
---
module: om_users
version_added: 1.0.0
short_description: Manages pdu attributes of opengear om pdu
description:
  - Manages pdu attributes of opengear om pdu.
author:
  - "Adrian Van Katwyk (@avankatwyk)"
  - "Matt Witmer (@mattwit)"
options:
  config:
    description: Retrieve and update pdu information
    type: list
    elements: dict
    suboptions:
      id:
        description: The unique id of the PDU.
        type: str
      name:
        description: A unique user specified name for the PDU.
        type: str
      driver:
        description: The driver to use to control and monitor the PDU.
        type: str
      method:
        description: The method to used to access the PDU, can be 'snmp', 'powerman' or 'shell'.
        type: str
      monitor:
        description: If true the pdu outlets are monitored for any change in status.
        type: bool
      powerman:
        description: The serial specific settings for a PDU.
        type: dict
        suboptions:
          id:
            type: str
            description: id
          username:
            type: str
            description: username
          password:
            type: str
            description: password
          port:
            type: str
            description: port
      shell:
        description: The serial specific settings for a PDU.
        type: dict
        suboptions:
          id:
            type: str
            description: id
          username:
            type: str
            description: username
          password:
            type: str
            description: password
          port:
            type: str
            description: port
      snmp:
        description: The SNMP configuration to access the PDU.
        type: dict
        suboptions:
          id:
            type: str
            description: id
          protocol:
            type: str
            description: tcp of udp
          address:
            type: str
            description: ip address
          port:
            type: int
            description: tcp or udp port
          version:
            type: str
            description: snmp version
          community:
            type: str
            description: community string
          auth_protocol:
            type: str
            description: snmpv3 auth protocol
          auth_password:
            type: str
            description: snmpv3 auth password
          username:
            type: str
            description: snmp username
          engine_id:
            type: str
            description: engine id
          privacy_protocol:
            type: str
            description: snmpv3 privacy protocol
          privacy_password:
            type: str
            description: snmpv3 privacy password
          security_level:
            type: str
            description: security level
  state:
    description:
    - The state of the configuration after module completion.
    type: str
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    - gathered
    - rendered
    default: merged
"""

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.opengear.om.plugins.module_utils.network.om.argspec.pdu.pdu import PduArgs
from ansible_collections.opengear.om.plugins.module_utils.network.om.config.pdu.pdu import Pdu


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=PduArgs.argument_spec,
                           supports_check_mode=True)

    result = Pdu(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
